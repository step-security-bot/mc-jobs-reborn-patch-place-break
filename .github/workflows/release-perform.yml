name: Release - Perform

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    paths:
      - .github/CHANGELOG.md

permissions:
  contents: read

jobs:
  release-perform:
    name: Release - Perform
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@eb238b55efaa70779f274895e782ed17c84f2895 # v2.6.1
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          # PAT required for bypassing tag protection
          token: ${{ secrets.PUSH_TOKEN }}
          # Required for tag existence check
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93 # v4.0.0
        with:
          java-version: 17
          distribution: temurin
          cache: maven

      - name: Verify compliant commit message and extract release version
        id: version
        run: |
          COMMIT_MESSAGE="$(git show --pretty=format:"%s" -s "${{ github.sha }}")"

          if [[ ! "${COMMIT_MESSAGE}" =~ ^docs\(changelog\):\ release\ (v([0-9]+\.[0-9]+\.[0-9]+)) ]]; then
            echo "Non-expected commit message: '${COMMIT_MESSAGE}'"
            echo 'Aborting...'
            exit 1
          fi

          echo "The following commit message is compliant: '${COMMIT_MESSAGE}'"

          RELEASE_VERSION="${BASH_REMATCH[1]}"
          UNPREFIXED_RELEASE_VERSION="${BASH_REMATCH[2]}"

          echo "Extracted release version: ${RELEASE_VERSION} (without prefix: ${UNPREFIXED_RELEASE_VERSION})"

          echo "prefixed=${RELEASE_VERSION}" >> "${GITHUB_OUTPUT}"
          echo "unprefixed=${UNPREFIXED_RELEASE_VERSION}" >> "${GITHUB_OUTPUT}"

      - name: Extract release changelog
        id: changelog
        run: |
          RELEASE_CHANGELOG_FILE='${{ runner.temp }}/release-changelog.md'

          cat ${{ github.workspace }}/.github/CHANGELOG.md |
            awk -v RS='\n\n- - -\n' '/^## \[${{ steps.version.outputs.prefixed }}]/' \
            > "${RELEASE_CHANGELOG_FILE}"

          if [[ -z "$(cat "${RELEASE_CHANGELOG_FILE}")" ]]; then
            echo 'Unexpected empty content for the extracted changelog'
            echo 'Aborting...'
            exit 1
          fi

          echo 'The following release changelog has been extracted from the CHANGELOG.md file:'
          echo "$(cat "${RELEASE_CHANGELOG_FILE}")"

          echo "file=${RELEASE_CHANGELOG_FILE}" >> "${GITHUB_OUTPUT}"

      - name: Generate plugin file
        run: |
          mvn versions:set -DnewVersion='${{ steps.version.outputs.unprefixed }}' --batch-mode --errors
          mvn clean package --activate-profiles fast --batch-mode --errors --strict-checksums --update-snapshots --fail-fast
          mvn versions:set -DnewVersion='0.0.1-DEV-SNAPSHOT' --batch-mode --errors

      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PLUGIN_FILE='${{ github.workspace }}/src/spigot-plugin/target/JobsReborn-PatchPlaceBreak-${{ steps.version.outputs.unprefixed }}.jar'

          if [[ ! -f "${PLUGIN_FILE}" ]]; then
            echo 'The plugin file does not exist or is invalid'
            echo 'Aborting...'
            exit 1
          fi

          echo "The plugin file which is going to be uploaded is '${PLUGIN_FILE}'"

          RELEASE_VERSION='${{ steps.version.outputs.prefixed }}'

          if [[ -n "$(git tag -l "${RELEASE_VERSION}")" ]]; then
            echo "The tag '${RELEASE_VERSION}' already exists"
            echo 'Aborting...'
            exit 1
          fi

          echo "The tag which is going to be created is '${RELEASE_VERSION}'"

          git tag "${RELEASE_VERSION}"
          git push origin refs/tags/"${RELEASE_VERSION}"

          gh release create "${RELEASE_VERSION}" "${PLUGIN_FILE}" \
            --title ${{ steps.version.outputs.prefixed }} \
            --notes-file ${{ steps.changelog.outputs.file }} \
            --target ${{ github.ref }} \
            --verify-tag
